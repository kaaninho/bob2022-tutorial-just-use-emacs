#+title: Just use Emacs!
#+author: Kaan Sahin
#+date: 2022-03-01
#+settings: (setq-local fill-column 56)

* Just use Emacs!



[[./emacs-logo-old.svg]]



Kaan Sahin, BOB 2022

* Einführung Emacs

** Emacs ist /alt/

* Einführung Emacs

** Emacs ist /alt/

- 1976 am MIT erste Funktionalitäten entstanden
- 1984 Beginn der Entwicklung an GNU Emacs (Richard
  Stallman)

* Einführung Emacs

** Emacs ist /alt/

- 1976 am MIT erste Funktionalitäten entstanden
- 1984 Beginn der Entwicklung an GNU Emacs (Richard
  Stallman)

Emacs steht für Editor MACroS

* Einführung Emacs

** Emacs ist /alt/

* Einführung Emacs

** Emacs ist /alt/ und wird /trotzdem/ noch benutzt

* Einführung Emacs

** Emacs ist /alt/ und wird /trotzdem/ noch benutzt

Warum?

* Einführung Emacs

** Emacs ist /alt/ und wird /trotzdem/ noch benutzt

Warum?

#+ATTR_ORG: :width 1200
[[./editor-of-a-life-time.png]]

* Einführung Emacs

** Emacs ist /alt/ und wird /trotzdem/ noch benutzt

Warum?

#+begin_quote
"In fact I don't just use Emacs, I live in Emacs."

- Perry E. Metzger
#+end_quote

* Einführung Emacs

** Emacs ist /alt/ und wird /trotzdem/ noch benutzt - warum?

#+ATTR_ORG: :width 1200
[[./great-at-editing.png]]

* Einführung Emacs

** Emacs ist /alt/ und wird /trotzdem/ noch benutzt - warum?

- "Great at Editing" - "Don't leave the keyboard!"
- "Editor of a Lifetime"
- "Living in Emacs"
- "Extensibility"

* Einführung Emacs

** Emacs ist /alt/ und wird /trotzdem/ noch benutzt - warum?

- "Great at Editing"
- "Editor of a Lifetime"
- "Living in Emacs" --> Vorteile später nochmal
- "Extensibility"

* Einführung Emacs

=keycast= !

* Einführung Emacs

** Basics: Tastenbefehle

* Einführung Emacs

** Basics: Tastenbefehle

=C= = Strg
=M= = Alt

* Einführung Emacs

** Basics: Tastenbefehle

=C= = Strg
=M= = Alt

=C-a=   = Strg gedrückt halten, dann a
=C-x b= = Strg gedrückt halten, dann x,
        beides loslassen, dann b

* Einführung Emacs

** Basics: Tastenbefehle

=C= = Strg
=M= = Alt

=C-a=   = Strg gedrückt halten, dann a
=C-x b= = Strg gedrückt halten, dann x,
        beides loslassen, dann b

- Cursor-Bewegung: =C-f=, =C-b=, =C-p=, =C-n=
- Abbruch: =C-g=
- Menü: =M-x= und dann Funktionsnamen eintippen
  -> Beispiel: =display-line-numbers-mode=

* Einführung Emacs

** Basics: Tastenbefehle

Befehle, die mit =C-x= beginnen, sind meist globale.

* Einführung Emacs

** Basics: Tastenbefehle

Befehle, die mit =C-x= beginnen, sind meist globale.

Befehle, die mit =C-c= beginnen, sind meist
Major-Mode-abhängig.

* Einführung Emacs

** Basics: Tastenbefehle

Befehle, die mit =C-x= beginnen, sind meist globale.

Befehle, die mit =C-c= beginnen, sind meist
Major-Mode-abhängig.

Mit =C-h= kann auf Hilfe zugegriffen werden, z. B.
nützlich:

* Einführung Emacs

** Basics: Tastenbefehle

Befehle, die mit =C-x= beginnen, sind meist globale.

Befehle, die mit =C-c= beginnen, sind meist
Major-Mode-abhängig.

Mit =C-h= kann auf Hilfe zugegriffen werden, z. B.
nützlich:

- =C-h m= Major-Mode-Infos
- =C-h f= Funktionen-Infos
- =C-h v= Variablen-Infos

* Einführung Emacs

** Buffer, Windows  and Frames

* Einführung Emacs

** Buffer, Windows  and Frames

aus der Emacs-Doku:

* Einführung Emacs

** Buffer, Windows  and Frames

aus der Emacs-Doku:

- "A *frame* is a screen object that contains one or more
  Emacs windows (see Windows)."

* Einführung Emacs

** Buffer, Windows  and Frames

aus der Emacs-Doku:

- "A *frame* is a screen object that contains one or more
  Emacs windows (see Windows)."

- "A *window* is an area of the screen that is used to
  display a buffer.

* Einführung Emacs

** Buffer, Windows  and Frames

aus der Emacs-Doku:

- "A *frame* is a screen object that contains one or more
  Emacs windows (see Windows)."

- "A *window* is an area of the screen that is used to
  display a buffer.

- "A *buffer* is a Lisp object containing text to be
  edited".

* Einführung Emacs

** Major- und Minor-Modes

* Einführung Emacs

** Major- und Minor-Modes

Es ist/sind pro Buffer

- genau ein Major-Mode
- mehrere Minor-Modes

aktiv

* Einführung Emacs

** Emacs Lisp

* Einführung Emacs

** Emacs Lisp

*** Syntax

#+begin_src emacs-lisp
(+ 15 7)

(setq my-var "Hallo")

(defun show-current-time ()
  "Show current time."
  (interactive)
  (message (current-time-string)))
#+end_src

* Einführung Emacs

** Vorgefertigte Emacs-Distros

- Spacemacs
- Doom Emacs

haben gute Defaults, leichteres Paketmanagement

* Konfiguration

** init.el

- Erst zusammen Emacs starten
- dann in =init.el= erste Zeilen auskommentieren
- Emacs neustarten
- Stück für Stück einkommentieren und auswerten (=C-x C-e=)

* Konfiguration

** Paketmanagement

Benutze =use-package=

* Konfiguration

** Paketmanagement

Benutze =use-package=

** Hooks

- Delete whitespace before saving

  #+begin_src elisp
  (add-hook 'before-save-hook #'delete-trailing-whitespace)
  #+end_src

* Konfiguration

** Eigene Key Bindings

* Konfiguration

** Eigene Key Bindings

- whitespace Ende der Zeile entfernen

#+begin_src lisp
(global-set-key (kbd "C-c d") 'delete-trailing-whitespace)
#+end_src

* Packages

Live-Hacking!

* Packages

I don't just use Emacs, I live in Emacs!

* Packages

I don't just use Emacs, I live in Emacs!

*Alles* passiert in Emacs.

Weniger Context Switches.

* Eigene Library entwickeln

Live-Hacking!

* Church of Emacs

* Church of Emacs

#+begin_quote
“Emacs started out as a text editor, which became a way
 of life for many users because they could do all their
 work on a computer while never exiting from Emacs, and
 ultimately it became a religion as well.”

-- Richard Stallman
#+end_quote
